name: CML Model Comparison Pipeline

permissions:
  contents: write          # needed for commit comments & asset uploads
  pull-requests: write     # needed for PR comments

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  train-compare-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train all models
        run: python train_experiments.py

      - name: Compare models and generate report assets
        run: python compare_models.py

      - name: Install CML
        run: npm install -g @dvcorg/cml

      - name: Build markdown report
        run: |
          {
            echo "# üèÜ Rapport de Comparaison de Mod√®les - Exercice 3"
            echo
            echo "## üéØ Meilleur Mod√®le S√©lectionn√©"
            echo
            echo '```json'
            cat experiments/best_model.json
            echo '```'
            echo
            echo "## üìä Comparaison des Accuracy"
            echo
            echo "![accuracy](reports/accuracy_comparison.png)"
            echo
            echo "## üìà Comparaison de Toutes les M√©triques"
            echo
            echo "![all-metrics](reports/all_metrics_comparison.png)"
            echo
            echo "## üî• Heatmap des Performances"
            echo
            echo "![heatmap](reports/performance_heatmap.png)"
            echo
            echo "## üìã R√©sultats D√©taill√©s"
            echo
            echo "<details>"
            echo "<summary>Cliquez pour voir tous les r√©sultats</summary>"
            echo
            echo '```json'
            cat experiments/all_results.json
            echo '```'
            echo "</details>"
          } > report.md

      # üëâ Explicit, event-aware targets + always pass the file
      - name: Post CML comment (PR or commit)
        env:
          # Prefer a PAT for forked PRs: add a repo-scoped PAT in secrets as CML_TOKEN.
          # Falls back to GitHub-provided token for pushes / same-repo PRs.
          REPO_TOKEN: ${{ secrets.CML_TOKEN || secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Determine target explicitly to avoid "PR not found" errors
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TARGET="pr/${{ github.event.pull_request.number }}"
          else
            TARGET="commit/${{ github.sha }}"
          fi

          # Create the comment (CML auto-uploads images referenced in the markdown)
          cml comment create --target="$TARGET" report.md || {
            echo "CML comment failed; falling back to commit comment via CML auto-target‚Ä¶" >&2
            cml comment create --target="commit/${{ github.sha }}" report.md
          }
