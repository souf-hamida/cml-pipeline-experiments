name: CML Model Comparison Pipeline

permissions:
  contents: write          # pour commentaires de commit & upload d'assets
  pull-requests: write     # pour commentaires sur PR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  train-compare-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train all models
        run: python train_experiments.py

      - name: Compare models and generate report assets
        run: python compare_models.py

      - name: Install CML
        run: npm install -g @dvcorg/cml

      - name: Build markdown report
        shell: bash
        run: |
          # (Optionnel) jolis JSON si jq pr√©sent ; sinon, on garde brut
          best_json=$( (jq '.' experiments/best_model.json) || cat experiments/best_model.json )
          all_json=$( (jq '.' experiments/all_results.json) || cat experiments/all_results.json )

          cat > report.md <<'MD'
          # üèÜ Rapport de Comparaison de Mod√®les ‚Äî Exercice 3

          ## üéØ Meilleur Mod√®le S√©lectionn√©

          ```json
          MD
          printf '%s\n' "$best_json" >> report.md
          cat >> report.md <<'MD'
          ```

          ## üìä Comparaison des Accuracy

          ![accuracy](reports/accuracy_comparison.png)

          ## üìà Comparaison de Toutes les M√©triques

          ![all-metrics](reports/all_metrics_comparison.png)

          ## üî• Heatmap des Performances

          ![heatmap](reports/performance_heatmap.png)

          ## üìã R√©sultats D√©taill√©s

          <details>
          <summary>Cliquez pour voir tous les r√©sultats</summary>

          ```json
          MD
          printf '%s\n' "$all_json" >> report.md
          cat >> report.md <<'MD'
          ```
          </details>
          MD

      - name: Post CML comment (PR or commit)
        env:
          # Recommand√©: PAT avec scope "repo" nomm√© CML_TOKEN pour commenter sur PRs de fork
          REPO_TOKEN: ${{ secrets.CML_TOKEN || secrets.GITHUB_TOKEN }}
          IS_FORK: ${{ github.event.pull_request.head.repo.fork }}
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA: ${{ github.sha }}
        run: |
          set -euo pipefail

          # Si c'est une PR de fork et qu'on n'a PAS de CML_TOKEN, on √©vite l'erreur et on log seulement
          if [[ "${EVENT_NAME}" == "pull_request" ]] && [[ "${IS_FORK:-false}" == "true" ]] && [[ -z "${{ secrets.CML_TOKEN }}" ]]; then
            echo "::warning::PR depuis un fork : GITHUB_T_
