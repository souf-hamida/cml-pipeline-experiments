name: CML Model Comparison Pipeline

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  train-compare-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train all models
        run: python train_experiments.py

      - name: Compare models and generate report assets
        run: python compare_models.py

      - name: Install CML
        run: npm install -g @dvcorg/cml

      # ‚úÖ Build report via here-doc (pas d'expressions GitHub dans le script)
      - name: Build markdown report
        shell: bash
        run: |
          best_json=$( (jq '.' experiments/best_model.json) || cat experiments/best_model.json )
          all_json=$( (jq '.' experiments/all_results.json) || cat experiments/all_results.json )

          cat > report.md <<'MD'
          # üèÜ Rapport de Comparaison de Mod√®les ‚Äî Exercice 3

          ## üéØ Meilleur Mod√®le S√©lectionn√©

          ```json
          MD
          printf '%s\n' "$best_json" >> report.md
          cat >> report.md <<'MD'
          ```

          ## üìä Comparaison des Accuracy

          ![accuracy](reports/accuracy_comparison.png)

          ## üìà Comparaison de Toutes les M√©triques

          ![all-metrics](reports/all_metrics_comparison.png)

          ## üî• Heatmap des Performances

          ![heatmap](reports/performance_heatmap.png)

          ## üìã R√©sultats D√©taill√©s

          <details>
          <summary>Cliquez pour voir tous les r√©sultats</summary>

          ```json
          MD
          printf '%s\n' "$all_json" >> report.md
          cat >> report.md <<'MD'
          ```
          </details>
          MD

      # ‚úÖ Plus de ${ { ... } } dans le script. On passe tout via env, puis bash g√®re.
      - name: Post CML comment (PR or commit)
        env:
          # Tokens bruts en env
          CML_TOKEN: ${{ secrets.CML_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Indicateurs/infos d‚Äô√©v√©nement pr√™ts √† l‚Äôemploi (valeurs litt√©rales)
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          IS_FORK_RAW: ${{ github.event.pull_request.head.repo.fork }}
          SHA: ${{ github.sha }}
        shell: bash
        run: |
          set -euo pipefail

          # Normaliser IS_FORK (vide -> false)
          IS_FORK="${IS_FORK_RAW:-false}"
          if [[ -z "${IS_FORK}" ]]; then IS_FORK="false"; fi

          # Choisir le token: pr√©f√©rer CML_TOKEN s'il existe, sinon GITHUB_TOKEN
          REPO_TOKEN="${CML_TOKEN:-$GITHUB_TOKEN}"
          export REPO_TOKEN

          # Si PR depuis un fork et pas de PAT, √©viter l'√©chec PR et commenter le commit
          if [[ "${EVENT_NAME}" == "pull_request" && "${IS_FORK}" == "true" && -z "${CML_TOKEN}" ]]; then
            echo "::warning::PR depuis un fork : GITHUB_TOKEN ne peut pas commenter la PR. Ajoutez un PAT dans secrets.CML_TOKEN pour activer le commentaire PR. Fallback: commentaire sur le commit."
            cml comment create --target="commit/${SHA}" report.md
            exit 0
          fi

          # Cibler explicitement PR ou commit
          if [[ "${EVENT_NAME}" == "pull_request" ]]; then
            TARGET="pr/${PR_NUMBER}"
          else
            TARGET="commit/${SHA}"
          fi

          # Cr√©er le commentaire ; CML uploade les images mentionn√©es dans report.md
          cml comment create --target="${TARGET}" report.md || {
            echo "CML a √©chou√© sur ${TARGET}; tentative fallback sur le commit‚Ä¶" >&2
            cml comment create --target="commit/${SHA}" report.md
          }
